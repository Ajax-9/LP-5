# -*- coding: utf-8 -*-
"""l01c01_introduction_to_colab_and_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l01c01_introduction_to_colab_and_python.ipynb

1) BFS
"""

import queue
import threading

class Graph:
    def __init__(self, V):
        self.V = V
        self.adj = [[] for i in range(V)]

    def addEdge(self, u, v):
        self.adj[u].append(v)
        self.adj[v].append(u)

    def BFS(self, start):
        q = queue.Queue()
        visited = [False] * self.V
        visited[start] = True
        q.put(start)
        while not q.empty():
            u = q.get()
            print(u, end=" ")
            for v in self.adj[u]:
                if not visited[v]:
                    visited[v] = True
                    q.put(v)

def main():
    g = Graph(7)
    g.addEdge(0, 1)
    g.addEdge(0, 2)
    g.addEdge(1, 3)
    g.addEdge(1, 4)
    g.addEdge(2, 5)
    g.addEdge(2, 6)
    print("Breadth First Search: ", end="")
    g.BFS(0)

if __name__ == "__main__":
    main()

"""DFS"""

def bubble_sort(array):
  """Sorts the given array using the bubble sort algorithm.

  Args:
    array: The array to sort.

  Returns:
    A sorted copy of the given array.
  """

  n = len(array)
  for i in range(n):
    for j in range(0, n - i - 1):
      if array[j] > array[j + 1]:
        array[j], array[j + 1] = array[j + 1], array[j]

  return array


def main():
  """The main function."""

  # Get the input from the user
  n = int(input("Enter the number of elements: "))
  array = []
  for i in range(n):
    array.append(int(input("Enter element {}: ".format(i + 1))))

  # Sort the array
  sorted_array = bubble_sort(array)

  # Print the sorted array
  print("The sorted array is:")
  for element in sorted_array:
    print(element)


if __name__ == "__main__":
  main()

"""2) Bubble sort"""

def bubble(a, n):
    for i in range(n):
        first = i % 2
        for j in range(first, n - 1, 2):
            if a[j] > a[j + 1]:
                a[j], a[j + 1] = a[j + 1], a[j]

def main():
    n = int(input("\n enter total no of elements => "))
    a = []
    print("\n enter elements => ")
    for _ in range(n):
        element = int(input())
        a.append(element)
    
    bubble(a, n)
    
    print("\n sorted array is => ")
    for element in a:
        print(element)
    
    return 0

if __name__ == "__main__":
    main()

"""3) Max Min and Avg operations using ||el reduction

"""

import sys
import numpy as np

def max_reduction(arr):
    max_value = -sys.maxsize
    for i in arr:
        if i > max_value:
            max_value = i
    print("Maximum value:", max_value)


def average_reduction(arr):
    sum = 0
    for i in arr:
        sum += i
    print("Average:", sum / (len(arr) - 1))

def main():
    n = int(input("\n enter total no of elements => "))
    arr = np.zeros(n, dtype=int)
    print("\n enter elements => ")
    for i in range(n):
        arr[i] = int(input())

    max_reduction(arr)
    average_reduction(arr)

if __name__ == "__main__":
    main()

"""3) Max and Sum ||el reduction"""

import sys
import numpy as np
import multiprocessing as mp

def max_reduction(arr):
    max_value = -sys.maxsize
    for i in arr:
        if i > max_value:
            max_value = i
    print("Maximum value:", max_value)

def min_reduction(arr):
    min_value = sys.maxsize
    for i in arr:
        if i < min_value:
            min_value = i
    print("Minimum value:", min_value)

def sum_reduction(arr):
    total_sum = 0
    for i in arr:
        total_sum += i
    print("Sum:", total_sum)

if __name__ == '__main__':
    n = int(input("\nEnter total number of elements: "))
    arr = []
    print("\nEnter elements:")
    for i in range(n):
        arr.append(int(input()))
    max_reduction(arr)
    min_reduction(arr)
    sum_reduction(arr)

"""CUDA Matrix operations



"""

!apt-get install cuda

!pip install numba

import numpy as np
from numba import cuda

# CUDA kernel to perform vector addition
@cuda.jit
def vector_addition(a, b, result):
    idx = cuda.threadIdx.x + cuda.blockDim.x * cuda.blockIdx.x
    if idx < len(a):
        result[idx] = a[idx] + b[idx]

# User input for vector length
vector_length = int(input("Enter the length of the vectors: "))

# User input for vector elements
vector_a = np.zeros(vector_length, dtype=np.float32)
vector_b = np.zeros(vector_length, dtype=np.float32)
for i in range(vector_length):
    vector_a[i] = float(input("Enter the element of vector a at index {}: ".format(i)))
    vector_b[i] = float(input("Enter the element of vector b at index {}: ".format(i)))

# Allocate memory on the GPU
device_vector_a = cuda.to_device(vector_a)
device_vector_b = cuda.to_device(vector_b)
device_result = cuda.device_array_like(vector_a)

# Define the number of threads per block and the number of blocks
threads_per_block = 32
blocks_per_grid = (vector_length + (threads_per_block - 1)) // threads_per_block

# Launch the kernel
vector_addition[blocks_per_grid, threads_per_block](device_vector_a, device_vector_b, device_result)

# Copy the result back to the CPU
result = device_result.copy_to_host()

# Print the result
print("Result:", result)

"""Boston House price Prediction"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.datasets import boston_housing
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the Boston Housing dataset
(X_train, y_train), (X_test, y_test) = boston_housing.load_data()

# Scale the features using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dense(64, activation='relu'))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

"""IMDB Movie Reviews"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Bidirectional, LSTM, Dense

(x_train,y_train),(x_test,y_test)=imdb.load_data(num_words=10000)
print(f'train dataset size: {len(x_train)}')
print(f'test dataset size: {len(x_test)}')

max_len =250
x_train=pad_sequences(x_train,maxlen=max_len)
x_test=pad_sequences(x_test,maxlen=max_len)
print(f'train size: {x_train.shape}')
print(f'test size: {x_test.shape}')

model=Sequential()
model.add(Embedding(input_dim=10000,output_dim=128,input_length=max_len))
model.add(Bidirectional(LSTM(64,return_sequences=True)))
model.add(Bidirectional(LSTM(32)))
model.add(Dense(1,activation='sigmoid'))
model.summary()

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

history = model.fit(x_train,y_train,epochs=3,batch_size=150,validation_split=0.2)

loss,acc=model.evaluate(x_test,y_test,batch_size=64)
print(f"test Accuracy: {acc:4f},test loss: {loss:4f}")

"""Fashion Dataset"""

import tensorflow as tf
!pip install keras
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = tf.keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

train_images = train_images / 255.0
test_images = test_images / 255.0

model = keras.Sequential([ keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense (128, activation='relu'), keras.layers.Dense (10, activation='softmax') ])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10)

test_loss, test_acc = model.evaluate(test_images, test_labels) 
print('Test accuracy:', test_acc)

predictions = model.predict(test_images)
predicted_labels = np.argmax(predictions, axis=1)

num_rows = 5
num_cols = 5
num_images = num_rows * num_cols
plt.figure(figsize=(2 * 2 * num_cols, 2 * num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2 * num_cols, 2 * i + 1) 
  plt.imshow(test_images[i], cmap='gray')
  plt.axis('off')
  plt.subplot(num_rows, 2 * num_cols, 2* i + 2)
  plt.bar(range(10), predictions[i])
  plt.xticks(range(10)) 
  plt.ylim([0, 1])
  plt.tight_layout()
  plt.title(f"Predicted label: {predicted_labels[i]}")
plt.show()